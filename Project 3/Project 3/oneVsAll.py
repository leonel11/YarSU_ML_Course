import numpy as np
import matplotlib.pyplot as plt
from gradientDescent import gradientDescent

def oneVsAll(X, y, num_labels, all_theta, alpha, iterations, flag):
    """
        Функция позволяет выполнить обучение num_labels классификаторов 
        на основе логистической регрессии для решения задачи многоклассовой 
        классификации на основе подхода "один против всех". Для проведения 
        процедуры обучения требуется матрица объекты-признаки X, вектор 
        меток y, а также параметр сходимости alpha и число итераций 
        iterations для выполнения градиентного спуска. Обученные параметры 
        модели сохраняются в матрицу all_theta, в которой каждый столбец 
        является вектором параметров i-го классификатора. При этом число 
        параметров в столбце равно числу признаков, которыми описывается 
        каждый объект в матрице X. Формальный параметр flag позволяет 
        включить или отключить визуализацию процесса сходимости градиентного 
        спуска для i-го классификатора
    """
    
    J_history = []
    
    for i in range(num_labels):
        print('Обучение классификатора №', i + 1)
        
        # ====================== Ваш код здесь ======================
        # Инструкция: выполнить обучение нескольких классифкаторов на 
        # основе логистической регрессии для решения задачи многоклассовой 
        # классификации на основе подхода "один против всех"
        
        all_theta[:, i:i+1] = gradientDescent(X, (y ==i).astype('uint8'), all_theta[:, i:i+1], alpha, iterations)
        
        # ============================================================
        
        # Визуализация процесса сходимости для i-го классифкатора
        if flag == True:
            plt.figure()
            plt.plot(np.arange(len(J_history)) + 1, J_history, '-b', linewidth = 2)
            plt.xlabel('Число итераций');
            plt.ylabel('Значение стоимостной функции')
            plt.title('Классификатор № ' + str(i + 1))
            plt.grid()
            plt.show()
        
        print('выполнено \n')
    
    return all_theta